// This file has been prepared for Doxygen automatic documentation generation.
/*! \file *********************************************************************
 *
 * \brief  This file defines the API for the AT86RF230 radio transceiver low level
 *         driver.
 *
 * \defgroup grRF230LowLevel The AT86RF230 Radio Transceiver Low Level Driver
 * \ingroup grLowLevelDrivers
 *
 *         This driver is must be implemented for each architecture that is to be
 *         supported. The defined API gives low level access to the AT86RF230
 *         radio transceiver's registers, frame buffer and SRAM.
 *
 * \par Application note:
 *      AVR2017: RZRAVEN FW
 *
 * \par Documentation
 *      For comprehensive code documentation, supported compilers, compiler
 *      settings and supported devices see readme.html
 *
 * \author
 *      Atmel Corporation: http://www.atmel.com \n
 *      Support email: avr@atmel.com
 *
 * $Id: rf230.h 41219 2008-05-01 10:51:43Z vkbakken $
 *
 * Copyright (c) 2008 , Atmel Corporation. All rights reserved.
 *
 * Licensed under Atmel’s Limited License Agreement (RZRaven Evaluation and Starter Kit). 
 *****************************************************************************/
#ifndef RF230_H
#define RF230_H

/*================================= INCLUDES         =========================*/
#include <stdint.h>
#include <stdbool.h>

#include "compiler.h"
#include "at86rf230_registermap.h"

#if defined(AVR)
#include    "rf230_avr.h"
#elif defined(XMEGA)
#include    "rf230_xmega.h"
#elif defined(AVR32)
//#include    "rf230_avr32.h"
#error  'Architecture not supported yet.'
#elif defined(SAM7)
#include  "rf230_sam7.h"
#else
#error  'This files should only be compiled with the ARCHITECTURE set.'
#endif

//! \addtogroup grRF230LowLevel
//! @{
/*================================= MACROS           =========================*/
#define RF230_DUMMY_READ         (0x00) //!< Dummy value for the SPI.

#define RF230_TRX_CMD_RW         (0xC0) //!< Register Write (short mode).
#define RF230_TRX_CMD_RR         (0x80) //!< Register Read (short mode).
#define RF230_TRX_CMD_FW         (0x60) //!< Frame Transmit Mode (long mode).
#define RF230_TRX_CMD_FR         (0x20) //!< Frame Receive Mode (long mode).
#define RF230_TRX_CMD_SW         (0x40) //!< SRAM Write.
#define RF230_TRX_CMD_SR         (0x00) //!< SRAM Read.
#define RF230_TRX_CMD_RADDRM     (0x7F) //!< Register Address Mask.

#define RF230_BAT_LOW_MASK       (0x80) //!< Mask for the BAT_LOW interrupt.
#define RF230_TRX_UR_MASK        (0x40) //!< Mask for the TRX_UR interrupt.
#define RF230_TRX_END_MASK       (0x08) //!< Mask for the TRX_END interrupt.
#define RF230_RX_START_MASK      (0x04) //!< Mask for the RX_START interrupt.
#define RF230_PLL_UNLOCK_MASK    (0x02) //!< Mask for the PLL_UNLOCK interrupt.
#define RF230_PLL_LOCK_MASK      (0x01) //!< Mask for the PLL_LOCK interrupt.

#define RF230_MIN_FRAME_LENGTH   (0x05) //!< A frame should be at least 3 bytes.
#define RF230_MAX_FRAME_LENGTH   (0x7F) //!< A frame should no more than 127 bytes.
/*================================= TYEPDEFS         =========================*/
/*! \brief Callback type from interrupt generated by the radio transceiver.*/
typedef void (*rf230_cb_handler_t)(uint8_t isr_event);
/*================================= GLOBAL VARIABLES =========================*/
extern rf230_cb_handler_t rf230_callback_handler; //!< Only access this variable through the associated access functions.
/*================================= LOCAL VARIABLES  =========================*/
/*================================= PROTOTYPES       =========================*/

/*! \brief  This function will initialize the RF230 device driver (SPI and GPIO).
 *
 *  \retval true The RF230 device driver was successfully started.
 *  \retval false Could not start the device driver.
 */
bool rf230_init(void);

/*! \brief  This function will turn the RF230 device driver off. */
void rf230_deinit(void);

/*! \brief  This function reads data from one of the radio transceiver's registers.
 *
 *  \param  address Register address to read from. See datasheet for register 
 *                  map.
 *
 *  \see Look at the at86rf230_registermap.h file for register address definitions.
 *
 *  \returns The actual value of the read register.
 */
uint8_t rf230_register_read(uint8_t address);

/*! \brief  This function writes a new value to one of the radio transceiver's 
 *          registers.
 *
 *  \see Look at the at86rf230_registermap.h file for register address definitions.
 *
 *  \param  address Address of register to write.
 *  \param  value   Value to write.
 */
void rf230_register_write(uint8_t address, uint8_t value);

/*! \brief  This function reads the value of a specific subregister.
 *
 *  \see Look at the at86rf230_registermap.h file for register and subregister 
 *       definitions.
 *
 *  \param  address  Main register's address.
 *  \param  mask  Bit mask of the subregister.
 *  \param  position   Bit position of the subregister
 *  \returns Value of the read subregister.
 */
uint8_t rf230_subregister_read(uint8_t address, uint8_t mask, uint8_t position);

/*! \brief  This function writes a new value to one of the radio transceiver's 
 *          subregisters.
 *
 *  \see Look at the at86rf230_registermap.h file for register and subregister 
 *       definitions.
 *
 *  \param  address  Main register's address.
 *  \param  mask  Bit mask of the subregister.
 *  \param  position  Bit position of the subregister
 *  \param  value  Value to write into the subregister.
 */
void rf230_subregister_write(uint8_t address, uint8_t mask, uint8_t position, uint8_t value);

/*! \brief  This function will download a frame to the radio transceiver's frame 
 *          buffer.
 *
 *  \param  length    Length of data. The maximum length is 127 bytes.
 *  \param  wr_buffer Pointer to data that is to be written to frame buffer.
 */
void rf230_frame_write(uint8_t length, const uint8_t *wr_buffer);

/*! \brief  This function will download a frame to the radio transceiver's frame 
 *          buffer from program memory.
 *
 *  \param  length    Length of data. The maximum length is 127 bytes.
 *  \param  wr_buffer Pointer to data in program memory that is to be written 
 *                    to frame buffer.
 */
void rf230_frame_write_P(uint8_t length, PROGMEM_BYTE_ARRAY_T wr_buffer);

/*! \brief Read data from the AT86RF230 radio transceiver's frame buffer.
 *
 *  \param[in] length Number of bytes to read from the frame buffer.
 *  \param[out] rd_buffer Pointer to storage where the read bytes will be stored.
 */
void rf230_frame_read(uint8_t length, uint8_t *rd_buffer);

/*! \brief Set pointer to the function that will be executed whenever a new interrupt
 *         event is signaled from the radio transceiver.
 *
 *  \param[in] handler Pointer to function that is called when a interrupt is signaled.
 */
void rf230_set_callback_handler(rf230_cb_handler_t handler);

/*! \brief Get current radio transceiver interrupt event handler.
 *
 *  \returns Current interrupt handler.
 */
rf230_cb_handler_t rf230_get_callback_handler(void);

/*! \brief Clear installed interrupt handler for the radio transceiver. */
void rf230_clear_callback_handler(void);



/* This block contains the documentation for all macros that are a part of the 
 * API.
 */
#if defined(DOXYGEN)



/*! \brief This macro pulls the SLP_TR pin high. */
void rf230_set_slptr_high(void);

/*! \brief This macro pulls the SLP_TR pin low. */
void rf230_set_slptr_low(void);

/*! \brief  Read current state of the SLP_TR pin (High/Low).
 *
 *  \returns 0 if the pin is low, 1 is the pin is high.
 */
uint8_t rf230_get_slptr(void);

/*! \brief This macro pulls the RST pin high. */
void rf230_set_rst_high(void);

/*! \brief This macro pulls the RST pin low. */
void rf230_set_rst_low(void);

/*! \brief  Read current state of the RST pin (High/Low).
 *
 *  \returns 0 if the pin is low, 1 if the pin is high.
 */
uint8_t rf230_get_rst(void);

/*! \brief This macro pulls the TST pin high. */
void rf230_set_tst_high(void);

/*! \brief This macro pulls the TST pin low. */
void rf230_set_tst_low(void);

/*! \brief  Read current state of the TST pin (High/Low).
 *
 *  \returns 0 if the pin is low, 1 is the pin is high.
 */
uint8_t rf230_get_tst(void);

/*! \brief This function-like macro implements a busy wait loop that will hang 
 *         until the SPIF is set.
 *
 *         The SPIF is set when the byte written to the SPI data register is sent.
 */
void RF230_WAIT_FOR_SPI_TX_COMPLETE(void);

/*! \brief This function-like macro is used to read one of the RF230's registers.
 *
 *  \note This macro shall only be used inside interrupt service routines.
 *
 *  \param[in] reg_addr Address of the register to read (rvalue).
 *  \param[in] reg_value Value read from the register (Must be supplied by the 
 *                       user. Must be an lvalue).
 */
void RF230_QUICK_REGISTER_READ(uint8_t reg_addr, uint8_t reg_value);

/*! \brief This function-like macro is used to write a value to one of the 
 *         RF230's registers.
 *
 *  \note This macro shall only be used inside interrupt service routines.
 *
 *  \param[in] reg_addr Address of the register to read (rvalue).
 *  \param[in] reg_value Value to be written. Can be both a rvalue or lvalue.
 */
void RF230_QUICK_REGISTER_WRITE(uint8_t reg_addr, uint8_t reg_value);

/*! \brief This function-like macro is used read one of the RF230's subregisters.
 *
 *  \note This macro shall only be used inside interrupt service routines.
 *
 *  \param[in] addr Address of the register to read (rvalue).
 *  \param[in] mask Mask to apply for extracting subregister value (rvalue).
 *  \param[in] pos Number of right shifts to apply to align the result (rvalue).
 *  \param[in] reg_value Value read. Must be a lvalue.
 */
void RF230_QUICK_SUBREGISTER_READ(uint8_t addr, uint8_t mask, uint8_t pos, uint8_t reg_value);

/*! \brief This function-like macro is used write a value to one of the RF230's 
 *         subregisters.
 *
 *  \note This macro shall only be used inside interrupt service routines.
 *
 *  \param[in] addr Address of the register to write (rvalue).
 *  \param[in] mask Mask to apply for extracting subregister value (rvalue).
 *  \param[in] pos Number of left shifts to apply to align the new subregister 
 *                 value (rvalue).
 *  \param[in] reg_value New subregister value. Can be both a rvalue or a lvalue.
 */
void RF230_QUICK_SUBREGISTER_WRITE(uint8_t addr, uint8_t mask, uint8_t pos, uint8_t reg_value);

/*! \brief Read length of the frame just received.
 *
 *  \param[in] frame_length variable where the frame length is to be stored.
 */
void RF230_QUICK_READ_FRAME_LENGTH(uint8_t frame_length);

/*! \brief Empty the radio transceivers frame buffer. Will append LQI value 
 *         after the last byte read. This macro is only to be used in interrupts
 *         or callback functions called from interrupt service routines!
 *
 * \param[in] frame_ptr Pointer to a buffer that is long enough to store the  
 *                      worst case frame length + lqi byte. The buffer must 
 *                      be at least 128 bytes long for IEEE 802.15.5 applications.
 */
void RF230_QUICK_FRAME_READ(uint8_t *frame_ptr);

/*! \brief This function-linke macro will set the callback from the RF230's 
 *         interrupt handler to NULL.
 */
void RF230_QUICK_CLEAR_ISR_CALLBACK(void);
#endif

//! @}

#endif
/* EOF */
